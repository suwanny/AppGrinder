/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package net.grinder.console.appbenchui;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class AppBenchConsole {

  public interface Iface {

    public void start(String arg1, String arg2) throws TException;

    public void stop(String arg1, String arg2) throws TException;

    public String get_status(String arg1, String arg2) throws TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void start(String arg1, String arg2) throws TException
    {
      send_start(arg1, arg2);
      recv_start();
    }

    public void send_start(String arg1, String arg2) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("start", TMessageType.CALL, seqid_));
      start_args args = new start_args();
      args.arg1 = arg1;
      args.arg2 = arg2;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_start() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      start_result result = new start_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void stop(String arg1, String arg2) throws TException
    {
      send_stop(arg1, arg2);
      recv_stop();
    }

    public void send_stop(String arg1, String arg2) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("stop", TMessageType.CALL, seqid_));
      stop_args args = new stop_args();
      args.arg1 = arg1;
      args.arg2 = arg2;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_stop() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      stop_result result = new stop_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public String get_status(String arg1, String arg2) throws TException
    {
      send_get_status(arg1, arg2);
      return recv_get_status();
    }

    public void send_get_status(String arg1, String arg2) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_status", TMessageType.CALL, seqid_));
      get_status_args args = new get_status_args();
      args.arg1 = arg1;
      args.arg2 = arg2;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_get_status() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_status_result result = new get_status_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_status failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("start", new start());
      processMap_.put("stop", new stop());
      processMap_.put("get_status", new get_status());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class start implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        start_args args = new start_args();
        args.read(iprot);
        iprot.readMessageEnd();
        start_result result = new start_result();
        iface_.start(args.arg1, args.arg2);
        oprot.writeMessageBegin(new TMessage("start", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class stop implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        stop_args args = new stop_args();
        args.read(iprot);
        iprot.readMessageEnd();
        stop_result result = new stop_result();
        iface_.stop(args.arg1, args.arg2);
        oprot.writeMessageBegin(new TMessage("stop", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_status implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_status_args args = new get_status_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_status_result result = new get_status_result();
        result.success = iface_.get_status(args.arg1, args.arg2);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("get_status", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class start_args implements TBase, java.io.Serializable, Cloneable   {
    public String arg1;
    public static final int ARG1 = 1;
    public String arg2;
    public static final int ARG2 = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean arg1 = false;
      public boolean arg2 = false;
    }

    public start_args() {
    }

    public start_args(
      String arg1,
      String arg2)
    {
      this();
      this.arg1 = arg1;
      this.__isset.arg1 = (arg1 != null);
      this.arg2 = arg2;
      this.__isset.arg2 = (arg2 != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public start_args(start_args other) {
      __isset.arg1 = other.__isset.arg1;
      if (other.arg1 != null) {
        this.arg1 = other.arg1;
      }
      __isset.arg2 = other.__isset.arg2;
      if (other.arg2 != null) {
        this.arg2 = other.arg2;
      }
    }

    public start_args clone() {
      return new start_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof start_args)
        return this.equals((start_args)that);
      return false;
    }

    public boolean equals(start_args that) {
      if (that == null)
        return false;

      boolean this_present_arg1 = true && (this.arg1 != null);
      boolean that_present_arg1 = true && (that.arg1 != null);
      if (this_present_arg1 || that_present_arg1) {
        if (!(this_present_arg1 && that_present_arg1))
          return false;
        if (!this.arg1.equals(that.arg1))
          return false;
      }

      boolean this_present_arg2 = true && (this.arg2 != null);
      boolean that_present_arg2 = true && (that.arg2 != null);
      if (this_present_arg2 || that_present_arg2) {
        if (!(this_present_arg2 && that_present_arg2))
          return false;
        if (!this.arg2.equals(that.arg2))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ARG1:
            if (field.type == TType.STRING) {
              this.arg1 = iprot.readString();
              this.__isset.arg1 = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ARG2:
            if (field.type == TType.STRING) {
              this.arg2 = iprot.readString();
              this.__isset.arg2 = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("start_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.arg1 != null) {
        field.name = "arg1";
        field.type = TType.STRING;
        field.id = ARG1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.arg1);
        oprot.writeFieldEnd();
      }
      if (this.arg2 != null) {
        field.name = "arg2";
        field.type = TType.STRING;
        field.id = ARG2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.arg2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("start_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("arg1:");
      sb.append(this.arg1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg2:");
      sb.append(this.arg2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class start_result implements TBase, java.io.Serializable, Cloneable   {
    public start_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public start_result(start_result other) {
    }

    public start_result clone() {
      return new start_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof start_result)
        return this.equals((start_result)that);
      return false;
    }

    public boolean equals(start_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("start_result");
      oprot.writeStructBegin(struct);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("start_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

  }

  public static class stop_args implements TBase, java.io.Serializable, Cloneable   {
    public String arg1;
    public static final int ARG1 = 1;
    public String arg2;
    public static final int ARG2 = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean arg1 = false;
      public boolean arg2 = false;
    }

    public stop_args() {
    }

    public stop_args(
      String arg1,
      String arg2)
    {
      this();
      this.arg1 = arg1;
      this.__isset.arg1 = (arg1 != null);
      this.arg2 = arg2;
      this.__isset.arg2 = (arg2 != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_args(stop_args other) {
      __isset.arg1 = other.__isset.arg1;
      if (other.arg1 != null) {
        this.arg1 = other.arg1;
      }
      __isset.arg2 = other.__isset.arg2;
      if (other.arg2 != null) {
        this.arg2 = other.arg2;
      }
    }

    public stop_args clone() {
      return new stop_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stop_args)
        return this.equals((stop_args)that);
      return false;
    }

    public boolean equals(stop_args that) {
      if (that == null)
        return false;

      boolean this_present_arg1 = true && (this.arg1 != null);
      boolean that_present_arg1 = true && (that.arg1 != null);
      if (this_present_arg1 || that_present_arg1) {
        if (!(this_present_arg1 && that_present_arg1))
          return false;
        if (!this.arg1.equals(that.arg1))
          return false;
      }

      boolean this_present_arg2 = true && (this.arg2 != null);
      boolean that_present_arg2 = true && (that.arg2 != null);
      if (this_present_arg2 || that_present_arg2) {
        if (!(this_present_arg2 && that_present_arg2))
          return false;
        if (!this.arg2.equals(that.arg2))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ARG1:
            if (field.type == TType.STRING) {
              this.arg1 = iprot.readString();
              this.__isset.arg1 = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ARG2:
            if (field.type == TType.STRING) {
              this.arg2 = iprot.readString();
              this.__isset.arg2 = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("stop_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.arg1 != null) {
        field.name = "arg1";
        field.type = TType.STRING;
        field.id = ARG1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.arg1);
        oprot.writeFieldEnd();
      }
      if (this.arg2 != null) {
        field.name = "arg2";
        field.type = TType.STRING;
        field.id = ARG2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.arg2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("stop_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("arg1:");
      sb.append(this.arg1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg2:");
      sb.append(this.arg2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class stop_result implements TBase, java.io.Serializable, Cloneable   {
    public stop_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_result(stop_result other) {
    }

    public stop_result clone() {
      return new stop_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stop_result)
        return this.equals((stop_result)that);
      return false;
    }

    public boolean equals(stop_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("stop_result");
      oprot.writeStructBegin(struct);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("stop_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_status_args implements TBase, java.io.Serializable, Cloneable   {
    public String arg1;
    public static final int ARG1 = 1;
    public String arg2;
    public static final int ARG2 = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean arg1 = false;
      public boolean arg2 = false;
    }

    public get_status_args() {
    }

    public get_status_args(
      String arg1,
      String arg2)
    {
      this();
      this.arg1 = arg1;
      this.__isset.arg1 = (arg1 != null);
      this.arg2 = arg2;
      this.__isset.arg2 = (arg2 != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_status_args(get_status_args other) {
      __isset.arg1 = other.__isset.arg1;
      if (other.arg1 != null) {
        this.arg1 = other.arg1;
      }
      __isset.arg2 = other.__isset.arg2;
      if (other.arg2 != null) {
        this.arg2 = other.arg2;
      }
    }

    public get_status_args clone() {
      return new get_status_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_status_args)
        return this.equals((get_status_args)that);
      return false;
    }

    public boolean equals(get_status_args that) {
      if (that == null)
        return false;

      boolean this_present_arg1 = true && (this.arg1 != null);
      boolean that_present_arg1 = true && (that.arg1 != null);
      if (this_present_arg1 || that_present_arg1) {
        if (!(this_present_arg1 && that_present_arg1))
          return false;
        if (!this.arg1.equals(that.arg1))
          return false;
      }

      boolean this_present_arg2 = true && (this.arg2 != null);
      boolean that_present_arg2 = true && (that.arg2 != null);
      if (this_present_arg2 || that_present_arg2) {
        if (!(this_present_arg2 && that_present_arg2))
          return false;
        if (!this.arg2.equals(that.arg2))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ARG1:
            if (field.type == TType.STRING) {
              this.arg1 = iprot.readString();
              this.__isset.arg1 = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ARG2:
            if (field.type == TType.STRING) {
              this.arg2 = iprot.readString();
              this.__isset.arg2 = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("get_status_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.arg1 != null) {
        field.name = "arg1";
        field.type = TType.STRING;
        field.id = ARG1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.arg1);
        oprot.writeFieldEnd();
      }
      if (this.arg2 != null) {
        field.name = "arg2";
        field.type = TType.STRING;
        field.id = ARG2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.arg2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_status_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("arg1:");
      sb.append(this.arg1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg2:");
      sb.append(this.arg2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_status_result implements TBase, java.io.Serializable, Cloneable   {
    public String success;
    public static final int SUCCESS = 0;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public get_status_result() {
    }

    public get_status_result(
      String success)
    {
      this();
      this.success = success;
      this.__isset.success = (success != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_status_result(get_status_result other) {
      __isset.success = other.__isset.success;
      if (other.success != null) {
        this.success = other.success;
      }
    }

    public get_status_result clone() {
      return new get_status_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_status_result)
        return this.equals((get_status_result)that);
      return false;
    }

    public boolean equals(get_status_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_status_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRING;
          field.id = SUCCESS;
          oprot.writeFieldBegin(field);
          oprot.writeString(this.success);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_status_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

}
